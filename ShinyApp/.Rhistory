new <- new[new$Intensity > 0,]
#new[new$Phospho..STY.>=1,]
})
})
save(batches_all_phospho_data_STY, file="/Users/Mahmoud.Hallal/Desktop/PhD/Stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/batches_all_phospho_data.Rda")
###############################################################################################
#Prepare to create eSet object
#Merge 3 batches and kepp only the phosphorylated proteins
#the 3 batches are the evidence files of the 3 runs
all_batches_eSet_only_phos_STY <- rbind(batch_STY_1, batch_STY_2, batch_STY_3)
#create df of interest
eSet_data1_STY <- all_batches_eSet_only_phos_STY[,c("Protein_with_position","Exp_short", "Intensity")]
#remove zero intensity values
eSet_data1_STY <- eSet_data1_STY[!eSet_data1_STY$Intensity == 0,]
#Assemble the dataframe
#eSet_data1 <- eSet_data1[!is.na(eSet_data1$Intensity),]
eSet_data_STY <- dcast(eSet_data1_STY, Exp_short ~ Protein_with_position, fun.aggregate = sum)
rownames(eSet_data_STY) <- eSet_data_STY[,1]
eSet_data_STY <- t(eSet_data_STY)
eSet_data_STY <- data.frame(eSet_data_STY[-1,])
###############################################################################################
#Prepare to create eSet object
#Merge 3 batches and kepp only the phosphorylated proteins
#the 3 batches are the evidence files of the 3 runs
all_batches_eSet_only_phos_STY <- rbind(batch_STY_1, batch_STY_2, batch_STY_3)
#create df of interest
eSet_data1_STY <- all_batches_eSet_only_phos_STY[,c("Protein_with_position","Exp_short", "Intensity")]
#remove zero intensity values
eSet_data1_STY <- eSet_data1_STY[!eSet_data1_STY$Intensity == 0,]
#Assemble the dataframe
#eSet_data1 <- eSet_data1[!is.na(eSet_data1$Intensity),]
eSet_data_STY <- dcast(eSet_data1_STY, Exp_short ~ Protein_with_position, fun.aggregate = sum)
library(reshape2)
#Assemble the dataframe
#eSet_data1 <- eSet_data1[!is.na(eSet_data1$Intensity),]
eSet_data_STY <- dcast(eSet_data1_STY, Exp_short ~ Protein_with_position, fun.aggregate = sum)
rownames(eSet_data_STY) <- eSet_data_STY[,1]
eSet_data_STY <- t(eSet_data_STY)
eSet_data_STY <- data.frame(eSet_data_STY[-1,])
eSet_data_STY$Proteins <- rownames(eSet_data_STY)
##################################################
## Project: Phosphoproteomics analysis of cell lines
## Script purpose: Create table with p-values from one tail (greater) t-test (cell line x vs all other cell lines)
## Date: 09.07.17
## Author: Mahmoud Hallal
##################################################
#source("https://bioconductor.org/biocLite.R")
#biocLite("Biobase")
library(Biobase)
#install.packages("ggplot2", repos="http://cran.rstudio.com/")
library(ggplot2)
#calculate logFC
getLogFC <- function(row, phenoTable, groupA, groupB, groupVar) {
indicesA = phenoTable[[groupVar]] == groupA
indicesB = phenoTable[[groupVar]] != groupA
mean(row[indicesA]) - mean(row[indicesB])
}
#calculate p-value with one tail (greater) t-test
getPValue <- function(row, phenoTable, groupA, groupB, groupVar, ttest) {
row = row + runif(length(row), -1e-6, 1e-6)
indicesA = phenoTable[[groupVar]] == groupA
indicesB = phenoTable[[groupVar]] != groupA
#cz we are only looking at overrepresentation
t.test(row[indicesA], row[indicesB], alternative = ttest)$p.value
}
#function to create a table of p-value, p-adj and logFC
#group A is the desired cell line and groupB is all the rest
getTopTable <- function(contrasts, eSet, groupVar, x, ttest) {
groupA = contrasts[x]
groupB = contrasts[-x]
topTable = fData(eSet)
#when only selecting the proteins that are present in every cell line
#topTable = data.frame()#
#eSet_modified <- exprs(eSet)[rowMedians(exprs(eSet)[,pData(eSet)[[groupVar]] == groupA]) > 0,]
eSet_modified <- exprs(eSet)
#eSet_modified[eSet_modified==0] <- NA
# eSet_modified <- eSet_modified[apply(eSet_modified[,pData(eSet)[[groupVar]] == groupA], 1, function(x) sum(is.na(x))) != ncol(eSet_modified[,pData(eSet)[[groupVar]] == groupA])*0.66666666666666667,]
# eSet_modified <- eSet_modified[apply(eSet_modified[,pData(eSet)[[groupVar]] != groupA], 1, function(x) sum(is.na(x))) != ncol(eSet_modified[,pData(eSet)[[groupVar]] != groupA])*0.66666666666666667,]
# eSet_modified[is.na(eSet_modified)] <- 0
#eSet_modified <- eSet_modified[complete.cases(eSet_modified),]
topTable = apply(eSet_modified, 1, getLogFC, pData(eSet), groupA, groupB, groupVar)
topTable <- as.data.frame(topTable)
topTable$p = apply(eSet_modified, 1, getPValue, pData(eSet), groupA,groupB, groupVar, ttest)
topTable$padj = p.adjust(topTable$p, method="fdr")
topTable = topTable[order(topTable$padj, topTable$p),]
topTable
#topTable1 = topTable[order(topTable$topTable, decreasing=TRUE),, drop=FALSE]
#topTable1
}
load('/Users/Mahmoud.Hallal/Desktop/PhD/Stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/test_eSet1.Rda')
contrasts =c("MOLM13_CTRL","MOLM13_DRG")
View(exprs(test_eSet))
#Take every batch separately and make some statistics of proteome and phosphorpteoome
load("/Users/Mahmoud.Hallal/Desktop/PhD/stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/batches_all_data.Rda")
load("/Users/Mahmoud.Hallal/Desktop/PhD/stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/batches_all_phospho_data.Rda")
#peptides
cell_lines <- c("MOLM13_CTRL","MOLM13_DRG")
#proteins
proteins_counts <- lapply(1:length(batches_all_data_STY), function(x) {
lapply(1:length(cell_lines), function(y) {
a = length(unique(batches_all_phospho_data_STY[[x]][[y]]$Protein))
b = length(unique(batches_all_phospho_data_STY[[x]][[y]]$Protein_with_position))
c = batches_all_phospho_data_STY[[x]][[y]]$Protein_with_position
d = batches_all_phospho_data_STY[[x]][[y]]$Protein
e = batches_all_phospho_data_STY[[x]][[y]]$Modified.sequence
return(list(all = a, phos = b, c = c, d = d, e = e))
})
})
###############################################################################################
##Stacked barplot for all batches of number of phosphorylated and non-phosphorylated peptides and proteins
# phosphorylated proteins with positions
sum_all <- as.data.frame(cbind(
#k562
c(proteins_counts[[1]][[1]]$phos, proteins_counts[[2]][[1]]$phos, proteins_counts[[3]][[1]]$phos,
#NB4
proteins_counts[[1]][[2]]$phos, proteins_counts[[2]][[2]]$phos, proteins_counts[[3]][[2]]$phos)
))
sum_all$row <- c("Phos")
#colnames(sum_all) <- c("K562_1","K562_2","K562_3", "NB4_1", "NB4_2", "NB4_3","THP1_1","THP1_2", "THP1_3","State")
sum_all$rep <- c("MOLM13_CTRL_1","MOLM13_CTRL_2","MOLM13_CTRL_3", "MOLM13_DRG_1","MOLM13_DRG_2","MOLM13_DRG_3")
#sum1 <- melt(sum_all, id.vars = "State")
sum_all$rep <- factor(sum_all$rep, levels=unique(sum_all$rep))
sum_all$Cell_line <- gsub("(.*)_.*","\\1",sum_all$rep)
dd <- ggplot(sum_all, aes(x=rep, y=V1, fill = Cell_line)) +
geom_bar(stat="identity") +
geom_text(aes(label=V1),vjust=-1, size=3) +
xlab("Replicates") +
ylab("# sites") +
labs(title="Phosphorylated sites") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 22)) +
theme(axis.text.y = element_text(size = 22)) +
theme(#axis.text=element_text(size=14),
axis.title=element_text(size=24))
plot(dd)
## Project: Phosphoproteomics analysis of cell lines
## Script purpose: Use STY files to get phosphorylated proteins and peptides
## Date: 13.06.17
## Author: Mahmoud Hallal
##################################################
#install.packages("stringi", repos="http://cran.rstudio.com/",type="mac.binary")
###
#install.packages('stringr', repos="http://cran.rstudio.com/")
#install.packages("reshape2", repos="http://cran.rstudio.com/")
#install.packages("~/Desktop/PhD/Stimulated_data_analysis/reshape2_1.4.3.tar", repos = NULL, type="source",dependencies=TRUE)
library("reshape2")
##
##Load the 4 files
#phos_STY_INC1 <- read.delim('/Users/Mahmoud.Hallal/Desktop/PhD/cell_lines_data/Stimulated_data/Molm13_Midostaurin_09.2018/20180913_MOLM13_TiO2_MQres_MH/Phospho (STY)Sites.txt')
phos_STY_INC1 <- read.delim('/Users/Mahmoud.Hallal/Desktop/PhD/cell_lines_data/Stimulated_data/Molm13_Midostaurin_09.2018/Luciphor_filtered_phosphoSTY_filtered.csv',sep=',')
#Choose the column names to use
to_keep_STY <- c("Protein", "Amino.acid", "Position", "Phospho..STY..Probabilities", "Reverse", "Potential.contaminant", "Localization.prob" ,
"Intensity.MOLM13_C1_INC1","Intensity.MOLM13_C1_INC2","Intensity.MOLM13_C2_INC1","Intensity.MOLM13_C2_INC2","Intensity.MOLM13_C3_INC1",
"Intensity.MOLM13_C3_INC2","Intensity.MOLM13_D1_INC1","Intensity.MOLM13_D1_INC2","Intensity.MOLM13_D2_INC1","Intensity.MOLM13_D2_INC2",
"Intensity.MOLM13_D3_INC1","Intensity.MOLM13_D3_INC2" )
#define cell lines
cell_lines <- c("MOLM13")
######
#Select the columns
#colnames(phos)[grep("Intensity", colnames(phos))]
files_to_use_STY <- c("phos_STY_INC1")
for (x in 1:length(files_to_use_STY)) {assign(paste0(files_to_use_STY[x],"_new"), get(files_to_use_STY[x])[,to_keep_STY])}
#Merge the 2 dfs since they have the same order and column names and
#then divide them according to 3 batches
all_phos_STY <- rbind(phos_STY_INC1_new)
all_phos_STY <- all_phos_STY[all_phos_STY$Localization.prob >= 0.75,]
#Sum the injection intensity values for every replicate separately
#controls
all_phos_STY$Intensity.1_MOLM13_CTRL <- rowSums(all_phos_STY[,grep('Intensity.MOLM13_C1', colnames(all_phos_STY))])
all_phos_STY$Intensity.2_MOLM13_CTRL <- rowSums(all_phos_STY[,grep('Intensity.MOLM13_C2', colnames(all_phos_STY))])
all_phos_STY$Intensity.3_MOLM13_CTRL <- rowSums(all_phos_STY[,grep('Intensity.MOLM13_C3', colnames(all_phos_STY))])
#Stimulated
all_phos_STY$Intensity.1_MOLM13_DRG <- rowSums(all_phos_STY[,grep('Intensity.MOLM13_D1', colnames(all_phos_STY))])
all_phos_STY$Intensity.2_MOLM13_DRG <- rowSums(all_phos_STY[,grep('Intensity.MOLM13_D2', colnames(all_phos_STY))])
all_phos_STY$Intensity.3_MOLM13_DRG <- rowSums(all_phos_STY[,grep('Intensity.MOLM13_D3', colnames(all_phos_STY))])
#clear all columns that are from the injections
all_phos_STY <- all_phos_STY[,-grep('_INC', colnames(all_phos_STY))]
#Take the same dataframe of intensities paste it three times above each other(nb of columns *3)
#where the proteins/peptides are repeated 3 times and each time with the sum intensities of one of the cell lines
#where a column with the cell line name was introduced.
first_batch_new_STY <- rbind(cbind(all_phos_STY[,-grep(paste(cell_lines,collapse="|"), colnames(all_phos_STY))], setNames(data.frame(all_phos_STY$Intensity.1_MOLM13_CTRL, rep(paste0(cell_lines[1],'_CTRL'), nrow(all_phos_STY))), c("Intensity", "cell_line"))),
cbind(all_phos_STY[,-grep(paste(cell_lines,collapse="|"), colnames(all_phos_STY))], setNames(data.frame(all_phos_STY$Intensity.1_MOLM13_DRG, rep(paste0(cell_lines[1],'_DRG'), nrow(all_phos_STY))), c("Intensity", "cell_line"))))
#phos2_new
#sum2_STY <- lapply(1:length(cell_lines), function(x) rowSums(phos2_STY_new[,grep(cell_lines[x], colnames(phos2_STY_new))]))
#sum_df2_STY <- data.frame(sum2_STY)
#colnames(sum_df2_STY) <- paste("2_Intensity.",cell_lines)
#second_batch_new <- cbind(phos2_new[,-grep(paste(cell_lines,collapse="|"), colnames(phos2_new))], sum_df2)
second_batch_new_STY <- rbind(cbind(all_phos_STY[,-grep(paste(cell_lines,collapse="|"), colnames(all_phos_STY))], setNames(data.frame(all_phos_STY$Intensity.2_MOLM13_CTRL, rep(paste0(cell_lines[1],'_CTRL'), nrow(all_phos_STY))), c("Intensity", "cell_line"))),
cbind(all_phos_STY[,-grep(paste(cell_lines,collapse="|"), colnames(all_phos_STY))], setNames(data.frame(all_phos_STY$Intensity.2_MOLM13_DRG, rep(paste0(cell_lines[1],'_DRG'), nrow(all_phos_STY))), c("Intensity", "cell_line"))))
#phos3_new
#sum3_STY <- lapply(1:length(cell_lines), function(x) rowSums(phos3_STY_new[,grep(cell_lines[x], colnames(phos3_STY_new))]))
#sum_df3_STY <- data.frame(sum3_STY)
#colnames(sum_df3_STY) <- paste("3_Intensity.",cell_lines)
#third_batch_new <- cbind(phos3_new[,-grep(paste(cell_lines,collapse="|"), colnames(phos3_new))], sum_df3)
third_batch_new_STY <- rbind(cbind(all_phos_STY[,-grep(paste(cell_lines,collapse="|"), colnames(all_phos_STY))], setNames(data.frame(all_phos_STY$Intensity.3_MOLM13_CTRL, rep(paste0(cell_lines[1],'_CTRL'), nrow(all_phos_STY))), c("Intensity", "cell_line"))),
cbind(all_phos_STY[,-grep(paste(cell_lines,collapse="|"), colnames(all_phos_STY))], setNames(data.frame(all_phos_STY$Intensity.3_MOLM13_DRG, rep(paste0(cell_lines[1],'_DRG'), nrow(all_phos_STY))), c("Intensity", "cell_line"))))
#merge and process
all_batches_STY <- list(first_batch_new_STY,second_batch_new_STY,third_batch_new_STY)
####here
###############################################################################################
#Keep only the protein accession number
new_all_batches_STY <- lapply(1:length(all_batches_STY), function(x){
#trim accession number
all_batches_STY[[x]]$Protein <- gsub("(^sp\\|)?","", all_batches_STY[[x]]$Protein)
all_batches_STY[[x]]$Protein <- gsub("[|].*","", all_batches_STY[[x]]$Protein)
#with or without isoforms
all_batches_STY[[x]]$Protein <- gsub("-[0-9]{1,2}","",all_batches_STY[[x]]$Protein)
#add phos site and position
all_batches_STY[[x]]$Protein_with_position <- paste0(all_batches_STY[[x]]$Protein, "_",all_batches_STY[[x]]$Amino.acid, all_batches_STY[[x]]$Position)
#remove PTMs except phosphorylations
all_batches_STY[[x]]$Modified.sequence <- gsub("\\(\\d+(\\.\\d{1,3})?\\)","", all_batches_STY[[x]]$Phospho..STY..Probabilities)
all_batches_STY[[x]]$Modified.sequence.position <- paste0(all_batches_STY[[x]]$Modified.sequence, "_",all_batches_STY[[x]]$Amino.acid, all_batches_STY[[x]]$Position)
#all_batches[[x]]$Modified.sequence <- gsub("_","", all_batches[[x]]$Modified.sequence)
#remove contaminants
#remvs <- c(conts_STY[[x]],revs_STY[[x]])
#all_batches_STY[[x]] <- all_batches_STY[[x]][-remvs,]
all_batches_STY[[x]]
})
#Divide the batches again
for(x in 1:length(all_batches_STY)) {assign(paste0('batch_STY_',x), new_all_batches_STY[[x]])}
#Save the proteins
batch_STY_1$Exp_short <- paste("1","_",batch_STY_1$cell_line,sep = "")
batch_STY_2$Exp_short <- paste("2","_",batch_STY_2$cell_line,sep = "")
batch_STY_3$Exp_short <- paste("3","_",batch_STY_3$cell_line,sep = "")
cell_lines <- c("MOLM13_CTRL","MOLM13_DRG")
batches_all_data_STY <- lapply(1:3, function(x) {
cell_lines_all_data_STY <- lapply(1:length(cell_lines), function(y){
new <- new_all_batches_STY[[x]][new_all_batches_STY[[x]]$cell_line == cell_lines[y],]
new <- new[new$Intensity > 0,]
})
})
#only phosphoproteome
batches_all_phospho_data_STY <- lapply(1:3, function(x) {
cell_lines_all_data_STY <- lapply(1:length(cell_lines), function(y){
new <- new_all_batches_STY[[x]][new_all_batches_STY[[x]]$cell_line == cell_lines[y],]
new <- new[new$Intensity > 0,]
#new[new$Phospho..STY.>=1,]
})
})
###############################################################################################
#Prepare to create eSet object
#Merge 3 batches and kepp only the phosphorylated proteins
#the 3 batches are the evidence files of the 3 runs
all_batches_eSet_only_phos_STY <- rbind(batch_STY_1, batch_STY_2, batch_STY_3)
#create df of interest
eSet_data1_STY <- all_batches_eSet_only_phos_STY[,c("Protein_with_position","Exp_short", "Intensity")]
#remove zero intensity values
eSet_data1_STY <- eSet_data1_STY[!eSet_data1_STY$Intensity == 0,]
#Assemble the dataframe
#eSet_data1 <- eSet_data1[!is.na(eSet_data1$Intensity),]
eSet_data_STY <- dcast(eSet_data1_STY, Exp_short ~ Protein_with_position, fun.aggregate = sum)
rownames(eSet_data_STY) <- eSet_data_STY[,1]
eSet_data_STY <- t(eSet_data_STY)
eSet_data_STY <- data.frame(eSet_data_STY[-1,])
eSet_data_STY$Proteins <- rownames(eSet_data_STY)
dim(eSet_data1_STY)
dim(eSet_data_STY)
#install.packages("gplots", repos="http://cran.rstudio.com/")
library(gplots)
#install.packages("pheatmap", repos="http://cran.rstudio.com/")
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
params <- read.table('/Users/Mahmoud.Hallal/Desktop/PhD/Stimulated_data_analysis/Molm13_Midostaurin_09.2018/snakemake/params/parameters.txt',sep=',', header = TRUE)
corDist = function(x) {
as.dist(1-cor(t(x)))
}
#
#args = commandArgs(TRUE)
inputFile_less = paste('/Users/Mahmoud.Hallal/Desktop/PhD/Stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/output_networks_with_positions_', params$fdr_cutoff,'fdr_filtered_less/pathways.txt',sep="")
outputFile2 = paste('/Users/Mahmoud.Hallal/Desktop/PhD/Stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/pathway_summary_all_phosprots_delete_True_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'fdr_heatmap.pdf',sep='')
#
results_less = read.table(inputFile_less, sep="\t", header=TRUE, stringsAsFactors=FALSE, quote="")
pathwayMatrix_less = as.matrix(results_less[,1:(ncol(results_less)-3)])
rownames(pathwayMatrix_less) <- results_less$description
#colnames(pathwayMatrix_less) <- c("MOLM13_CTRL", "MOLM13_DRG")
all_less <- lapply(1:ncol(pathwayMatrix_less), function(x){
less <- data.frame()
less <- as.data.frame(cbind(pathwayMatrix_less[,x], rownames(pathwayMatrix_less)))
less$V1 <- as.numeric(as.character(less$V1))
less <- less[!less$V1 == 0,]
less$V1 <- round(less$V1, digits = 3)
less <- less[order(less$V1, decreasing = T),]
less$V1 <- -less$V1
if(nrow(less) >0){
less$color <- "blue"
less$V2 <- paste0(less$V2,'-')
}
less
})
#input2
inputFile1_greater = paste('/Users/Mahmoud.Hallal/Desktop/PhD/Stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/output_networks_with_positions_', params$fdr_cutoff,'fdr_filtered_greater/pathways.txt',sep="")
results_greater = read.table(inputFile1_greater, sep="\t", header=TRUE, stringsAsFactors=FALSE, quote="")
pathwayMatrix_greater = as.matrix(results_greater[,1:(ncol(results_greater)-3)])
rownames(pathwayMatrix_greater) <- results_greater$description
all_greater <- lapply(1:ncol(pathwayMatrix_greater), function(x){
greater <- data.frame()
greater <- as.data.frame(cbind(pathwayMatrix_greater[,x], rownames(pathwayMatrix_greater)))
greater$V1 <- as.numeric(as.character(greater$V1))
greater <- greater[!greater$V1 == 0,]
greater$V1 <- round(greater$V1, digits = 3)
greater <- greater[order(greater$V1, decreasing = T),]
if(nrow(greater) >0){
greater$color <- "red"
greater$V2 <- paste0(greater$V2,'+')
}
greater
})
#pathwayMatrix <- pathwayMatrix[,c(1,2)]
#pathwayMatrix <- pathwayMatrix[rowSums(pathwayMatrix)>0,]
#colnames(pathwayMatrix) <- c("U2OS_Rap_WT","U2OS_RapConA_WT")
#colnames(pathwayMatrix) <- c("U2OS_Rap_WT")
both <- lapply(1:length(all_greater), function(x){
df <- rbind(all_less[[x]],all_greater[[x]])
colnames(df) <- c("Enrichment.score","Kinase","Color")
df
})
names(both) <- colnames(pathwayMatrix_greater)
material_for_waterfall <- both
pathwayMatrix_less <- -pathwayMatrix_less
pathwayMatrix <- rbind(pathwayMatrix_greater, pathwayMatrix_less)
#EXTRA
dd1 <- as.data.frame(pathwayMatrix_less)
dd2 <- as.data.frame(pathwayMatrix_greater)
#install.packages("dplyr", repos="http://cran.rstudio.com/")
library(dplyr)
ll <- bind_rows(dd1 %>% add_rownames(),
dd2 %>% add_rownames()) %>%
# evaluate following calls for each value in the rowname column
group_by(rowname) %>%
# add all non-grouping variables
summarise_all(sum)
cc <- as.data.frame(ll)
pathwayMatrix <- cc
rownames(pathwayMatrix) <- cc$rowname
#take only Rap_WT
#pathwayMatrix <- as.matrix(pathwayMatrix[,3])
#rownames(pathwayMatrix) <- cc$rowname
#pathwayMatrix <- as.matrix(pathwayMatrix[!pathwayMatrix == 0,])
#colnames(pathwayMatrix) <- colnames(pathwayMatrix_less)[2]
write.csv(pathwayMatrix, '/Users/Mahmoud.Hallal/Desktop/PhD/Stimulated_data_analysis/Molm13_Midostaurin_09.2018_results/Material_for_heatmap.csv', row.names = F)
##
##Load the 4 files
phos_STY_INC1 <- read.delim('/Users/Mahmoud.Hallal/Desktop/PhD/cell_lines_data/Stimulated_data/Molm13_Midostaurin_09.2018/20180913_MOLM13_TiO2_MQres_MH/Phospho (STY)Sites.txt')
#Choose the column names to use
to_keep_STY <- c("Protein", "Amino.acid", "Position", "Phospho..STY..Probabilities", "Reverse", "Potential.contaminant", "Localization.prob" ,
"Intensity.MOLM13_C1_INC1","Intensity.MOLM13_C1_INC2","Intensity.MOLM13_C2_INC1","Intensity.MOLM13_C2_INC2","Intensity.MOLM13_C3_INC1",
"Intensity.MOLM13_C3_INC2","Intensity.MOLM13_D1_INC1","Intensity.MOLM13_D1_INC2","Intensity.MOLM13_D2_INC1","Intensity.MOLM13_D2_INC2",
"Intensity.MOLM13_D3_INC1","Intensity.MOLM13_D3_INC2" )
#define cell lines
cell_lines <- c("MOLM13")
######
#Select the columns
#colnames(phos)[grep("Intensity", colnames(phos))]
files_to_use_STY <- c("phos_STY_INC1")
for (x in 1:length(files_to_use_STY)) {assign(paste0(files_to_use_STY[x],"_new"), get(files_to_use_STY[x])[,to_keep_STY])}
shiny::runApp('Desktop/PhD/Generalized_pipeline/ShinyApp')
paste0("../results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$FDR_cutoff,'FDR/',"all_dbs.csv")
## Load parameters
params <- read_yaml("../snakemake/config.yaml")
paste0("../results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$FDR_cutoff,'FDR/',"all_dbs.csv")
library(yaml)
## Load parameters
params <- read_yaml("../snakemake/config.yaml")
setwd("~/Desktop/PhD/Generalized_pipeline/snakemake")
setwd("~/Desktop/PhD/Generalized_pipeline/ShinyApp")
runApp()
## Load parameters
params <- read_yaml("../snakemake/config.yaml")
paste0("../results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$FDR_cutoff,'FDR/',"all_dbs.csv")
## Couple hover plot for Barplot
all_dbs <- read.csv(paste0("../results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"all_dbs.csv"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0("../results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"pathview")
runApp()
## Load parameters
params <- read_yaml("../snakemake/config.yaml")
paste0("../results/",params$cell_line,'_',FDR_value,'P_',params$fdr_cutoff,'FDR/',"pathview")
paste0("../results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"pathview")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyPathview2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load('../../Generalized_pipeline/results/MOLM13_0.01P_0.05FDR_Imputation/topTables_MOLM13_greater.Rda')
View(topTables_greater$MOLM13_DRG)
runApp()
runApp()
load('../results/K562_0.01P_0.01FDR/results_shiny_K562_0.01FDR_0.01P.Rda')
material_for_waterfall <- shiny_results$waterfall_rep
material_for_waterfall
x <- 1
df1 <- material_for_waterfall[[x]][!duplicated(material_for_waterfall[[x]]$Kinase),]
#make dataframe
df <- as.data.frame(df1[,1])
rownames(df) <- df1[,2]
colnames(df) <- "value"
df1 <- material_for_waterfall[[x]][!duplicated(material_for_waterfall[[x]]$Kinase),]
#make dataframe
df <- as.data.frame(df1[,1])
df1 <- material_for_waterfall[[x]][!duplicated(material_for_waterfall[[x]]$Kinase),]
df1
#make dataframe
df <- as.data.frame(df1$Enrichment.score)
rownames(df) <- df1$Kinase
colnames(df) <- "value"
##
#dd <- df$value
#names(dd) <- rownames(df)
#names(dd) <- gsub('(\\w+)[+-]','\\1',rownames(df))
#dd1 <- dd[!duplicated(names(dd))]
dd1 <- df
dd2 <- as.data.frame(dd1)
dd2
dd2
runApp()
material_for_waterfall$K562_CTRL
material_for_waterfall$K562_CTRL[!duplicated(material_for_waterfall$K562_CTRL$Kinase),]
material_for_waterfall
x
#df1 <- material_for_waterfall[[x]][!duplicated(material_for_waterfall[[x]]$Kinase),]
#make dataframe
df1 <- material_for_waterfall[[x]]
df <- as.data.frame(df1$Enrichment.score)
df
rownames(df) <- df1$Kinase
#rownames(df) <- df1$Kinase
colnames(df) <- "value"
#df1 <- material_for_waterfall[[x]][!duplicated(material_for_waterfall[[x]]$Kinase),]
#make dataframe
df1 <- material_for_waterfall[[x]]
df <- as.data.frame(df1$Enrichment.score)
#rownames(df) <- df1$Kinase
colnames(df) <- "value"
##
#dd <- df$value
#names(dd) <- rownames(df)
#names(dd) <- gsub('(\\w+)[+-]','\\1',rownames(df))
#dd1 <- dd[!duplicated(names(dd))]
dd1 <- df
dd2 <- as.data.frame(dd1)
dd2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0("../results/",cell_line(),'_',P_value(),'P_',FDR_value(),'FDR/',"all_dbs.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
