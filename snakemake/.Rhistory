#make dataframe
df <- as.data.frame(df1[,1])
df
rownames(df) <- df1[,2]
colnames(df) <- "value"
dd <- df$value
dd
names(dd) <- gsub('(\\w+)[+-]','\\1',rownames(df))
dd
dd1 <- dd[!duplicated(names(dd))]
dd2 <- as.data.frame(dd1)
dd2
rownames(dd2) <- names(dd1)
colnames(dd2) <- "value"
dd2
dd2
## Load material for waterfall plots
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"Material_for_waterfall_", params$fdr_cutoff,"FDR_", params$pvalue_cutoff,"P_",params$cell_line,".Rda"))
df1 <- material_for_waterfall[[x]][!duplicated(material_for_waterfall[[x]]$Kinase),]
df1
#make dataframe
df <- as.data.frame(df1[,1])
df
df1
#make dataframe
df <- as.data.frame(df1$Enrichment.score)
df
rownames(df) <- df1$Kinase
df
colnames(df) <- "value"
dd <- df$value
dd
#names(dd) <- gsub('(\\w+)[+-]','\\1',rownames(df))
dd1 <- dd[!duplicated(names(dd))]
#make dataframe
df <- as.data.frame(df1$Enrichment.score)
rownames(df) <- df1$Kinase
colnames(df) <- "value"
dd <- df$value
dd
#dd <- df$value
#names(dd) <- gsub('(\\w+)[+-]','\\1',rownames(df))
#dd1 <- dd[!duplicated(names(dd))]
dd1 <- df
dd1
dd2 <- as.data.frame(dd1)
dd2
## Create table of pathways using waterfall input
to_sbmt <- lapply(1:length(material_for_waterfall), function(x){
df1 <- material_for_waterfall[[x]][!duplicated(material_for_waterfall[[x]]$Kinase),]
#make dataframe
df <- as.data.frame(df1$Enrichment.score)
rownames(df) <- df1$Kinase
colnames(df) <- "value"
#dd <- df$value
#names(dd) <- gsub('(\\w+)[+-]','\\1',rownames(df))
#dd1 <- dd[!duplicated(names(dd))]
dd1 <- df
dd2 <- as.data.frame(dd1)
#rownames(dd2) <- names(dd1)
#colnames(dd2) <- "value"
dd2
})
names(to_sbmt) <- names(material_for_waterfall)
files <- names(to_sbmt)
to_sbmt
# library(dplyr)
# library(plotly)
# detach("package:dplyr", unload=TRUE)
# detach("package:plotly", unload=TRUE)
## Load parameters
params <- read_yaml("./config.yaml")
## Load material for heatmap
Heatmap_rep <- read.csv(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"Material_for_heatmap_", params$fdr_cutoff,"FDR_", params$pvalue_cutoff,"P_",params$cell_line,".csv"), row.names = 1,sep=" ")
## Load material for waterfall plots
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"Material_for_waterfall_", params$fdr_cutoff,"FDR_", params$pvalue_cutoff,"P_",params$cell_line,".Rda"))
load('../results/K562_0.01P_0.01FDR+/Material_for_waterfall_0.01FDR_0.01P_K562.Rda')
## Load material for waterfall plots
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"Material_for_waterfall_", params$fdr_cutoff,"FDR_", params$pvalue_cutoff,"P_",params$cell_line,".Rda"))
## Load parameters file
params <- read_yaml("./config.yaml")
### FOR normalisation
## Prepare MSnSet object
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet_notfiltered_",params$cell_line,".Rda"))
10^2.7
#biocLite("Biobase")
library(Biobase)
library(ggplot2)
library(yaml)
## Load parameters file
params <- read_yaml("./config.yaml")
## Define logFC function
getLogFC <- function(row, phenoTable, groupA, groupB, groupVar) {
indicesA = phenoTable[[groupVar]] == groupA
indicesB = phenoTable[[groupVar]] != groupA
mean(row[indicesA]) - mean(row[indicesB])
}
## Define PValue function
getPValue <- function(row, phenoTable, groupA, groupB, groupVar, ttest) {
row = row + runif(length(row), -1e-6, 1e-6)
indicesA = phenoTable[[groupVar]] == groupA
indicesB = phenoTable[[groupVar]] != groupA
#cz we are only looking at overrepresentation
t.test(row[indicesA], row[indicesB], alternative = ttest)$p.value
}
## Define a function to create a table of p-value, p-adj and logFC
getTopTable <- function(contrasts, eSet, groupVar, x, ttest) {
groupA = contrasts[x]
groupB = contrasts[-x]
topTable = fData(eSet)
eSet_modified <- exprs(eSet)
#keep complete cases only
eSet_modified[eSet_modified==0] <- NA
eSet_modified <- eSet_modified[complete.cases(eSet_modified),]
#calculate FC
topTable = apply(eSet_modified, 1, getLogFC, pData(eSet), groupA, groupB, groupVar)
topTable <- as.data.frame(topTable)
#calculate pvalue
topTable$p = apply(eSet_modified, 1, getPValue, pData(eSet), groupA, groupB, groupVar,ttest)
topTable$padj = p.adjust(topTable$p, method="fdr")
topTable = topTable[order(topTable$padj, topTable$p),]
topTable
}
## Load input expressionSet
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet1_",params$cell_line,".Rda"))
## Define the conditions to compare
contrasts <- unlist(strsplit(params$Conditions,","))
## Calculate two-tailed t-test
topTables_ts <- lapply(1:length(contrasts), function(x) getTopTable(contrasts, test_eSet, "cell_line", x, "two.sided"))
names(topTables_ts) <- contrasts
View(topTables_ts$K562_CTRL)
## Plot volcano plots for every condition
for (x in 1:length(topTables_ts)){
data <- topTables_ts
#Mark threshold on 0.05pvalue
data[[x]]$threshold = as.factor(data[[x]]$padj < 0.05)
data[[x]]$prots <- rownames(data[[x]])
#plot the volcano plot
g <- ggplot(data=data[[x]],
aes(x=topTable, y =-log10(p),colour=threshold, label=rownames(data[[x]]))) +
geom_point(alpha=0.4, size=1.75) +
xlab("log2 fold change") + ylab("-log10 p-value") +
theme_bw() +
theme(legend.position="none") +
ggtitle("Volcano plot",names(data)[[x]]) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 22)) +
theme(axis.text.y = element_text(size = 22)) +
theme(axis.title=element_text(size=24))
#create pdf output
pdf(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"Volcano_plot_",params$cell_line,"_",names(data)[[x]],".pdf"), width = 8)
plot(g)
dev.off()
}
## Define a function to create a table of p-value, p-adj and logFC
getTopTable <- function(contrasts, eSet, groupVar, x, ttest) {
groupA = contrasts[x]
groupB = contrasts[-x]
topTable = fData(eSet)
eSet_modified <- exprs(eSet)
#keep complete cases only
eSet_modified[eSet_modified==0] <- NA
eSet_modified <- eSet_modified[complete.cases(eSet_modified),]
#calculate FC
topTable = apply(eSet_modified, 1, getLogFC, pData(eSet), groupA, groupB, groupVar)
topTable <- as.data.frame(topTable)
#calculate pvalue
topTable$p = apply(eSet_modified, 1, getPValue, pData(eSet), groupA, groupB, groupVar,ttest)
topTable$padj = p.adjust(topTable$p, method="BH")
topTable = topTable[order(topTable$padj, topTable$p),]
topTable
}
## Load input expressionSet
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet1_",params$cell_line,".Rda"))
## Define the conditions to compare
contrasts <- unlist(strsplit(params$Conditions,","))
## Calculate two-tailed t-test
topTables_ts <- lapply(1:length(contrasts), function(x) getTopTable(contrasts, test_eSet, "cell_line", x, "two.sided"))
names(topTables_ts) <- contrasts
## Plot volcano plots for every condition
for (x in 1:length(topTables_ts)){
data <- topTables_ts
#Mark threshold on 0.05pvalue
data[[x]]$threshold = as.factor(data[[x]]$padj < 0.05)
data[[x]]$prots <- rownames(data[[x]])
#plot the volcano plot
g <- ggplot(data=data[[x]],
aes(x=topTable, y =-log10(p),colour=threshold, label=rownames(data[[x]]))) +
geom_point(alpha=0.4, size=1.75) +
xlab("log2 fold change") + ylab("-log10 p-value") +
theme_bw() +
theme(legend.position="none") +
ggtitle("Volcano plot",names(data)[[x]]) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 22)) +
theme(axis.text.y = element_text(size = 22)) +
theme(axis.title=element_text(size=24))
#create pdf output
pdf(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"Volcano_plot_",params$cell_line,"_",names(data)[[x]],".pdf"), width = 8)
plot(g)
dev.off()
}
## Save output for Shiny
data_volcano <- topTables_ts
volcano_material <- lapply(1:length(topTables_ts), function(x){
#Mark threshold on 0.05pvalue
data_volcano[[x]]$threshold <- as.factor(data_volcano[[x]]$p < 0.05)
data_volcano[[x]]$prots <- rownames(data_volcano[[x]])
data_volcano[[x]]
})
names(volcano_material) <- names(topTables_ts)
View(topTables_ts$K562_CTRL)
## Define a function to create a table of p-value, p-adj and logFC
getTopTable <- function(contrasts, eSet, groupVar, x, ttest) {
groupA = contrasts[x]
groupB = contrasts[-x]
topTable = fData(eSet)
eSet_modified <- exprs(eSet)
#keep complete cases only
eSet_modified[eSet_modified==0] <- NA
eSet_modified <- eSet_modified[complete.cases(eSet_modified),]
#calculate FC
topTable = apply(eSet_modified, 1, getLogFC, pData(eSet), groupA, groupB, groupVar)
topTable <- as.data.frame(topTable)
#calculate pvalue
topTable$p = apply(eSet_modified, 1, getPValue, pData(eSet), groupA, groupB, groupVar,ttest)
topTable$padj = p.adjust(topTable$p, method="fdr")
topTable = topTable[order(topTable$padj, topTable$p),]
topTable
}
## Load input expressionSet
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet1_",params$cell_line,".Rda"))
## Define the conditions to compare
contrasts <- unlist(strsplit(params$Conditions,","))
## Calculate two-tailed t-test
topTables_ts <- lapply(1:length(contrasts), function(x) getTopTable(contrasts, test_eSet, "cell_line", x, "two.sided"))
names(topTables_ts) <- contrasts
## Plot volcano plots for every condition
for (x in 1:length(topTables_ts)){
data <- topTables_ts
#Mark threshold on 0.05pvalue
data[[x]]$threshold = as.factor(data[[x]]$padj < 0.05)
data[[x]]$prots <- rownames(data[[x]])
#plot the volcano plot
g <- ggplot(data=data[[x]],
aes(x=topTable, y =-log10(p),colour=threshold, label=rownames(data[[x]]))) +
geom_point(alpha=0.4, size=1.75) +
xlab("log2 fold change") + ylab("-log10 p-value") +
theme_bw() +
theme(legend.position="none") +
ggtitle("Volcano plot",names(data)[[x]]) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 22)) +
theme(axis.text.y = element_text(size = 22)) +
theme(axis.title=element_text(size=24))
#create pdf output
pdf(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"Volcano_plot_",params$cell_line,"_",names(data)[[x]],".pdf"), width = 8)
plot(g)
dev.off()
}
View(topTables_ts$K562_CTRL)
## Load parameters file
params <- read_yaml("./config.yaml")
### FOR normalisation
## Prepare MSnSet object
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet_notfiltered_",params$cell_line,".Rda"))
cell_lines <- strsplit(params$Conditions,",")[[1]]
exprs_all <- exprs(test_eSet)
exprs(test_eSet)[exprs(test_eSet)== 0] <- NA
yy <- as.MSnSet.ExpressionSet(test_eSet)
ll <-exprs_all
View(ll)
exprs(test_eSet)[exprs(test_eSet)== 0] <- NA
yy <- as.MSnSet.ExpressionSet(test_eSet)
## Normalise by diff.mean
msnset.nrm <- normalise(yy, "quantiles")
exprs_all <- exprs(msnset.nrm)
exprs_all[is.na(exprs_all)] <- 0
## Remove lines with 0s only
exprs_all2 <- exprs_all[rowSums(exprs_all) != 0,]
## Imputation based on the condition
#Impute based on cell line separately
#Replace 0 by NA if 1 or 2 values are missing for a triplicate
if (params$Imputation == "T"){
print("## IMPUTATION START ##")
options("expressions"=500000)
for (x in 1:length(cell_lines)) {
indices <- which(test_eSet$cell_line == cell_lines[x])
indices_NA <-  (apply(exprs_all[, indices] == 0, 1, sum) == 1) | (apply(exprs_all[, indices] == 0, 1, sum) == 2)
exprs_all[indices_NA,indices][exprs_all[indices_NA,indices] == 0]  <- NA
}
exprs(test_eSet) <- exprs_all
exprs_all2 <- exprs_all
yy <- as.MSnSet.ExpressionSet(test_eSet)
# impute separately for every cell line and them add all to test_eSet
# #MLE
for (x in 1:length(cell_lines)) {
indices <- which(yy$cell_line == cell_lines[x])
exprs_all2[,indices] <- exprs(impute(yy[,indices], method = "MLE"))
}
exprs_all2 <- exprs_all2[!rowSums(exprs_all2) ==0,]
print("## IMPUTATION FINISH ##")
}
View(exprs_all2)
### FOR normalisation
## Prepare MSnSet object
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet_notfiltered_",params$cell_line,".Rda"))
cell_lines <- strsplit(params$Conditions,",")[[1]]
exprs_all <- exprs(test_eSet)
exprs(test_eSet)[exprs(test_eSet)== 0] <- NA
yy <- as.MSnSet.ExpressionSet(test_eSet)
## Normalise by diff.mean
msnset.nrm <- normalise(yy, "quantiles")
exprs_all <- exprs(msnset.nrm)
exprs_all[is.na(exprs_all)] <- 0
## Remove lines with 0s only
exprs_all2 <- exprs_all[rowSums(exprs_all) != 0,]
ll <- exprs_all2
## Imputation based on the condition
#Impute based on cell line separately
#Replace 0 by NA if 1 or 2 values are missing for a triplicate
if (params$Imputation == "T"){
print("## IMPUTATION START ##")
options("expressions"=500000)
for (x in 1:length(cell_lines)) {
indices <- which(test_eSet$cell_line == cell_lines[x])
indices_NA <-  (apply(exprs_all[, indices] == 0, 1, sum) == 1) | (apply(exprs_all[, indices] == 0, 1, sum) == 2)
exprs_all[indices_NA,indices][exprs_all[indices_NA,indices] == 0]  <- NA
}
exprs(test_eSet) <- exprs_all
exprs_all2 <- exprs_all
yy <- as.MSnSet.ExpressionSet(test_eSet)
# impute separately for every cell line and them add all to test_eSet
# #MLE
for (x in 1:length(cell_lines)) {
indices <- which(yy$cell_line == cell_lines[x])
exprs_all2[,indices] <- exprs(impute(yy[,indices], method = "MLE"))
}
exprs_all2 <- exprs_all2[!rowSums(exprs_all2) ==0,]
print("## IMPUTATION FINISH ##")
}
####
#Recreate the expression set
aDataFrame <- function(input) {
metaData = data.frame(labelDescription=colnames(input),
row.names=colnames(input))
new("AnnotatedDataFrame", data=input, varMetadata=metaData)
}
View(ll)
View(exprs_all2)
## Load parameters
params <- read_yaml("./config.yaml")
## Load expressionSet
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet1_",params$cell_line,".Rda"))
rr <- as.data.frame(exprs(test_eSet))
rr$prots <- rownames(rr)
View(rr)
load('../results/K562_0.005P_0.025FDR_imputation_full/test_eSet1_K562.Rda')
rr2 <- as.data.frame(exprs(test_eSet))
rr2$prots <- rownames(rr2)
View(rr2)
### FOR normalisation
## Prepare MSnSet object
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet_notfiltered_",params$cell_line,".Rda"))
cell_lines <- strsplit(params$Conditions,",")[[1]]
exprs_all <- exprs(test_eSet)
rr <- as.data.frame(exprs(test_eSet))
rr3 <- as.data.frame(exprs(test_eSet))
rr3$prots <- rownames(rr2)
rr3$prots <- rownames(rr3)
View(rr3)
View(rr)
## Load expressionSet
load(paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"test_eSet1_",params$cell_line,".Rda"))
rr <- as.data.frame(exprs(test_eSet))
rr$prots <- rownames(rr)
View(rr)
2^28.53
2^30.686
## Load libraries
#install.packages("gplots", repos="http://cran.rstudio.com/")
library(gplots)
#install.packages("pheatmap", repos="http://cran.rstudio.com/")
library(pheatmap)
library(ggplot2)
library(RColorBrewer)
library(yaml)
## Load parameters
params <- read_yaml("./config.yaml")
conditions <- strsplit(params$Conditions, split=",")[[1]]
## Load input file from underactive kianses
pathwayMatrix_less <- lapply(1:length(conditions), function(x){
nme <- paste0('inputFile_',strsplit(params$Conditions, split=",")[[1]][x])
assign(nme, paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"output_networks_with_positions_",params$fdr_cutoff,"FDR_",params$pvalue_cutoff,"P_",params$cell_line,"_less/",conditions[x] ,"_pathways.txt"))
results = read.table(get(nme), sep="\t", header=TRUE, stringsAsFactors=FALSE, quote="")
pathwayMatrix = as.matrix(results[,c("correctedPValue")])
rownames(pathwayMatrix) <- results$description
colnames(pathwayMatrix) <- conditions[x]
pathwayMatrix <- as.data.frame(pathwayMatrix)
pathwayMatrix$color <- "blue"
pathwayMatrix$kinase <- rownames(pathwayMatrix)
pathwayMatrix <- pathwayMatrix[order(pathwayMatrix[[conditions[x]]], decreasing = T),]
pathwayMatrix[[conditions[x]]]<- -log10(pathwayMatrix[[conditions[x]]])
pathwayMatrix[[conditions[x]]] <- round(pathwayMatrix[[conditions[x]]], digits = 5)
pathwayMatrix[[conditions[x]]] <- -pathwayMatrix[[conditions[x]]]
pathwayMatrix
})
## Load the input file for overactive kinases
pathwayMatrix_greater <- lapply(1:length(conditions), function(x){
nme <- paste0('inputFile_',strsplit(params$Conditions, split=",")[[1]][x])
assign(nme, paste0(params$CWD,"/results/",params$cell_line,'_',params$pvalue_cutoff,'P_',params$fdr_cutoff,'FDR/',"output_networks_with_positions_",params$fdr_cutoff,"FDR_",params$pvalue_cutoff,"P_",params$cell_line,"_greater/",conditions[x] ,"_pathways.txt"))
results = read.table(get(nme), sep="\t", header=TRUE, stringsAsFactors=FALSE, quote="")
pathwayMatrix = as.matrix(results[,c("correctedPValue")])
rownames(pathwayMatrix) <- results$description
colnames(pathwayMatrix) <- conditions[x]
pathwayMatrix <- as.data.frame(pathwayMatrix)
pathwayMatrix$color <- "red"
pathwayMatrix$kinase <- rownames(pathwayMatrix)
pathwayMatrix <- pathwayMatrix[order(pathwayMatrix[[conditions[x]]], decreasing = T),]
pathwayMatrix[[conditions[x]]]<- -log10(pathwayMatrix[[conditions[x]]])
pathwayMatrix[[conditions[x]]] <- round(pathwayMatrix[[conditions[x]]], digits = 5)
pathwayMatrix
})
## Merge over- and under- active kinases
both <- lapply(1:length(pathwayMatrix_greater), function(x){
df <- rbind(pathwayMatrix_less[[x]],pathwayMatrix_greater[[x]])
colnames(df) <- c("Enrichment.score","Color","Kinase")
df
})
names(both) <- conditions
material_for_waterfall <- both
material_for_waterfall
x <- c('K562_DRG')
water_fall <- ggplot(data=both[[x]], aes(x=reorder(Kinase,Enrichment.score), y=Enrichment.score, fill= Color)) +
geom_bar(position="dodge",stat="identity", fill=both[[x]]$Color) +
coord_flip() +
ggtitle("Kinase enrichments") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 18)) +
theme(axis.text.y = element_text(size = 12)) +
xlab("Kinase") +
theme(#axis.text=element_text(size=14),
axis.title=element_text(size=20))#
plot(water_fall)
water_fall <- ggplot(data=both[[x]], aes(x=reorder(Kinase,Enrichment.score), y=Enrichment.score)) +
geom_bar(position="dodge",stat="identity", fill=both[[x]]$Color) +
coord_flip() +
ggtitle("Kinase enrichments") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 18)) +
theme(axis.text.y = element_text(size = 12)) +
xlab("Kinase") +
theme(#axis.text=element_text(size=14),
axis.title=element_text(size=20))#
plot(water_fall)
water_fall <- ggplot(data=both[[x]], aes(x=reorder(Kinase,Enrichment.score), y=Enrichment.score, fill= Color)) +
geom_bar(position="dodge",stat="identity") +
coord_flip() +
ggtitle("Kinase enrichments") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 18)) +
theme(axis.text.y = element_text(size = 12)) +
xlab("Kinase") +
theme(#axis.text=element_text(size=14),
axis.title=element_text(size=20))#
plot(water_fall)
water_fall <- ggplot(data=both[[x]], aes(x=reorder(Kinase,Enrichment.score), y=Enrichment.score)) +
geom_bar(position="dodge",stat="identity", fill=both[[x]]$Color) +
coord_flip() +
ggtitle("Kinase enrichments") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 18)) +
theme(axis.text.y = element_text(size = 12)) +
xlab("Kinase") +
theme(#axis.text=element_text(size=14),
axis.title=element_text(size=20))#
plot(water_fall)
water_fall <- ggplot(data=both[[x]], aes(x=reorder(Kinase,Enrichment.score), y=Enrichment.score)) +
geom_bar(stat="identity", fill=both[[x]]$Color) +
coord_flip() +
ggtitle("Kinase enrichments") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 18)) +
theme(axis.text.y = element_text(size = 12)) +
xlab("Kinase") +
theme(#axis.text=element_text(size=14),
axis.title=element_text(size=20))#
plot(water_fall)
library(devtools)
library(devtools)
install_github("ntorbica/bct/Package")
## Read input file
data_cmml <- read.delim('~/Desktop/PhD/External projects/CMML/new_data3/data_P0441_20181213-084212.csv',sep=",")
rr1 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/mnpp0441peri_blood_P0441_20181213-094720.csv')
rr2 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/atemnpp0441_comal_P0441_20181213-094720.csv')
merge(rr1,rr2,by="mnppid")
rr1 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/atcasenodes_P0441_20181213-094720.csv')
rr2 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/atcasevisitplans_P0441_20181213-094720.csv')
merge(rr1,rr2,by="mnppid")
rr1 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/atemnpp0441_coais_P0441_20181213-094720.csv')
merge(rr1,rr2,by="mnppid")
rr1 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/atemnpp0441_coais_P0441_20181213-094720.csv',sep=",")
rr2 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/atcasevisitplans_P0441_20181213-094720.csv',sep=",")
rr1
merge(rr1,rr2,by="mnppid")
pp <- merge(rr1,rr2,by="mnppid")
View(pp)
rr2 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/mnpp0441_inclusion_P0441_20181213-094720.csv',sep=",")
rr1 <- read.delim('../../External projects/CMML/new_data5/p_export_CSV_P0441_20181213-094720/mnpp0441_medhist_P0441_20181213-094720.csv',sep=",")
pp <- merge(rr1,rr2,by="mnppid")
View(pp)
rr2$mnppid
length(unique(rr2$mnppid))
rr1$mnppid
rr2$mnppid
